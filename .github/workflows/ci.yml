name: CI/CD Pipeline
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
jobs:
  setup_db:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: wtp
          POSTGRES_USER: sebastianholmberg
          POSTGRES_PASSWORD: devpass123
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checka ut repo
        uses: actions/checkout@v4
      - name: Installera psql
        run: sudo apt-get install -y postgresql-client
      - name: Initiera databasstruktur
        run: |
          # Kör grundläggande schemadefiniton från init.sql
          PGPASSWORD=devpass123 psql -h localhost -U sebastianholmberg -d wtp -f sql/init.sql
          
          # Lägg till nödvändiga data i role-tabellen
          PGPASSWORD=devpass123 psql -h localhost -U sebastianholmberg -d wtp -c "
          -- Säkerställ att roller finns
          INSERT INTO role (id, company_role) VALUES (1, 'User') ON CONFLICT (id) DO NOTHING;
          INSERT INTO role (id, company_role) VALUES (2, 'Admin') ON CONFLICT (id) DO NOTHING;
          INSERT INTO role (id, company_role) VALUES (3, 'SuperAdmin') ON CONFLICT (id) DO NOTHING;
          
          -- Skapa vyn initial_form_messages
          CREATE OR REPLACE VIEW initial_form_messages AS
          SELECT
              tf.chat_token,
              tf.message,
              tf.first_name as sender,
              tf.submitted_at,
              tf.issue_type,
              tf.email,
              tf.company_type as form_type
          FROM tele_forms tf
          WHERE tf.is_chat_active = true
          UNION ALL
          SELECT
              ff.chat_token,
              ff.message,
              ff.first_name as sender,
              ff.submitted_at,
              ff.issue_type,
              ff.email,
              ff.company_type as form_type
          FROM fordon_forms ff
          WHERE ff.is_chat_active = true
          UNION ALL
          SELECT
              fs.chat_token,
              fs.message,
              fs.first_name as sender,
              fs.submitted_at,
              fs.issue_type,
              fs.email,
              fs.company_type as form_type
          FROM forsakrings_forms fs
          WHERE fs.is_chat_active = true;"

  api_tests_and_seed:
    needs: setup_db
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: wtp
          POSTGRES_USER: sebastianholmberg
          POSTGRES_PASSWORD: devpass123
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__DefaultConnection: Host=localhost;Port=5432;Database=wtp;Username=sebastianholmberg;Password=devpass123;Include Error Detail=true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      - name: Installera psql
        run: sudo apt-get install -y postgresql-client
      - name: Initiera databasstruktur (samma som setup_db)
        run: |
          # Kör grundläggande schemadefiniton från init.sql
          PGPASSWORD=devpass123 psql -h localhost -U sebastianholmberg -d wtp -f sql/init.sql
          
          # Lägg till nödvändiga data i role-tabellen
          PGPASSWORD=devpass123 psql -h localhost -U sebastianholmberg -d wtp -c "
          -- Säkerställ att roller finns
          INSERT INTO role (id, company_role) VALUES (1, 'User') ON CONFLICT (id) DO NOTHING;
          INSERT INTO role (id, company_role) VALUES (2, 'Admin') ON CONFLICT (id) DO NOTHING;
          INSERT INTO role (id, company_role) VALUES (3, 'SuperAdmin') ON CONFLICT (id) DO NOTHING;
          
          -- Skapa vyn initial_form_messages
          CREATE OR REPLACE VIEW initial_form_messages AS
          SELECT
              tf.chat_token,
              tf.message,
              tf.first_name as sender,
              tf.submitted_at,
              tf.issue_type,
              tf.email,
              tf.company_type as form_type
          FROM tele_forms tf
          WHERE tf.is_chat_active = true
          UNION ALL
          SELECT
              ff.chat_token,
              ff.message,
              ff.first_name as sender,
              ff.submitted_at,
              ff.issue_type,
              ff.email,
              ff.company_type as form_type
          FROM fordon_forms ff
          WHERE ff.is_chat_active = true
          UNION ALL
          SELECT
              fs.chat_token,
              fs.message,
              fs.first_name as sender,
              fs.submitted_at,
              fs.issue_type,
              fs.email,
              fs.company_type as form_type
          FROM forsakrings_forms fs
          WHERE fs.is_chat_active = true;"
      - name: Ändra anslutningssträngar i testfiler
        run: |
          find ./WTP-main/server.Tests -name "*.cs" -type f -exec sed -i 's/private readonly string _connectionString = "Host=localhost;Port=5432;Database=wtp;Username=sebastianholmberg;";/private readonly string _connectionString = "Host=localhost;Port=5432;Database=wtp;Username=sebastianholmberg;Password=devpass123;Include Error Detail=true";/g' {} \;
      - name: Uppdatera appsettings.json med rätt anslutningssträng
        run: |
          sed -i 's/"DefaultConnection": "Host=localhost;Port=5432;Database=wtp;Username=sebastianholmberg;"/"DefaultConnection": "Host=localhost;Port=5432;Database=wtp;Username=sebastianholmberg;Password=devpass123;Include Error Detail=true"/g' ./WTP-main/server/appsettings.json
          echo "Anslutningssträng i appsettings.json uppdaterad"
          cat ./WTP-main/server/appsettings.json
      - name: Bygg och kör tester (xUnit)
        run: |
          dotnet restore ./WTP-main/server.Tests/server.Tests.csproj
          dotnet build ./WTP-main/server.Tests/server.Tests.csproj
          dotnet test ./WTP-main/server.Tests/server.Tests.csproj --verbosity normal
      - name: Seed testdata
        run: |
          # Kör SQL direkt från seed-filen istället för att gå via applikationen
          PGPASSWORD=devpass123 psql -h localhost -U sebastianholmberg -d wtp -c "
            -- Skapa admin-användare
            INSERT INTO public.users (first_name, password, created_at, company, role_id, email) 
            VALUES ('admin', 'admin321', '2025-04-07 07:42:10.181265 +00:00', 'fordon', 2, 'admin@admin.com')
            ON CONFLICT (email) DO UPDATE SET password = 'admin321';
          "
          echo "Direkt seed av testdata klar"

  postman_tests:
    needs: api_tests_and_seed
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: wtp
          POSTGRES_USER: sebastianholmberg
          POSTGRES_PASSWORD: devpass123
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__DefaultConnection: Host=localhost;Port=5432;Database=wtp;Username=sebastianholmberg;Password=devpass123;Include Error Detail=true
    steps:
      - name: Checka ut repo
        uses: actions/checkout@v4
      - name: Installera Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Installera dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      - name: Installera psql
        run: sudo apt-get install -y postgresql-client
      - name: Installera curl
        run: sudo apt-get install -y curl
      - name: Initiera databasstruktur (samma som setup_db)
        run: |
          # Kör grundläggande schemadefiniton från init.sql
          PGPASSWORD=devpass123 psql -h localhost -U sebastianholmberg -d wtp -f sql/init.sql
          
          # Lägg till nödvändiga data i role-tabellen
          PGPASSWORD=devpass123 psql -h localhost -U sebastianholmberg -d wtp -c "
          -- Säkerställ att roller finns
          INSERT INTO role (id, company_role) VALUES (1, 'User') ON CONFLICT (id) DO NOTHING;
          INSERT INTO role (id, company_role) VALUES (2, 'Admin') ON CONFLICT (id) DO NOTHING;
          INSERT INTO role (id, company_role) VALUES (3, 'SuperAdmin') ON CONFLICT (id) DO NOTHING;
          
          -- Skapa vyn initial_form_messages
          CREATE OR REPLACE VIEW initial_form_messages AS
          SELECT
              tf.chat_token,
              tf.message,
              tf.first_name as sender,
              tf.submitted_at,
              tf.issue_type,
              tf.email,
              tf.company_type as form_type
          FROM tele_forms tf
          WHERE tf.is_chat_active = true
          UNION ALL
          SELECT
              ff.chat_token,
              ff.message,
              ff.first_name as sender,
              ff.submitted_at,
              ff.issue_type,
              ff.email,
              ff.company_type as form_type
          FROM fordon_forms ff
          WHERE ff.is_chat_active = true
          UNION ALL
          SELECT
              fs.chat_token,
              fs.message,
              fs.first_name as sender,
              fs.submitted_at,
              fs.issue_type,
              fs.email,
              fs.company_type as form_type
          FROM forsakrings_forms fs
          WHERE fs.is_chat_active = true;"
      - name: Uppdatera appsettings.json med rätt anslutningssträng
        run: |
          sed -i 's/"DefaultConnection": "Host=localhost;Port=5432;Database=wtp;Username=sebastianholmberg;"/"DefaultConnection": "Host=localhost;Port=5432;Database=wtp;Username=sebastianholmberg;Password=devpass123;Include Error Detail=true"/g' ./WTP-main/server/appsettings.json
          echo "Anslutningssträng i appsettings.json uppdaterad"
      - name: Seed testdata
        run: |
          # Kör SQL direkt från seed-filen istället för att gå via applikationen
          PGPASSWORD=devpass123 psql -h localhost -U sebastianholmberg -d wtp -c "
            -- Skapa admin-användare
            INSERT INTO public.users (first_name, password, created_at, company, role_id, email) 
            VALUES ('admin', 'admin321', '2025-04-07 07:42:10.181265 +00:00', 'fordon', 2, 'admin@admin.com')
            ON CONFLICT (email) DO UPDATE SET password = 'admin321';
            
            -- Seed minimal testdata för Postman-testerna
            INSERT INTO public.tele_forms (first_name, email, service_type, issue_type, message, chat_token, submitted_at, is_chat_active, company_type)
            VALUES ('TestKund', 'testkund@example.com', 'Bredband', 'Tekniskt problem', 'Testar ett formulär för teleärenden', '14dbbbb1-df13-4f5a-9ed7-f4553c48469c', '2025-04-07 09:51:40.188483 +00:00', true, 'Tele/Bredband')
            ON CONFLICT DO NOTHING;
          "
          echo "Direkt seed av testdata klar"
      - name: Installera Newman
        run: npm install -g newman
      - name: Starta backend
        run: dotnet run --project ./WTP-main/server/server.csproj &
      - name: Vänta på backend
        run: sleep 30
      - name: Kontrollera att backend körs
        run: |
          echo "Kontrollerar om backend svarar..."
          curl -v http://localhost:5000/api/health || echo "Health endpoint svarar inte, men vi fortsätter"
          echo "Testar admin-inloggning..."
          curl -v -X POST http://localhost:5000/api/login -H "Content-Type: application/json" -d '{"username":"admin@admin.com","password":"admin321"}' || echo "Login-endpoint svarar inte, men vi fortsätter"
      - name: Kör Postman-tester
        run: |
          # Se till att filerna finns och tillgängliga
          echo "Listar Postman-filer:"
          ls -la postman/
          
          newman run postman/WTP.postman_collection.json \
            -e postman/WTP_environment.postman_environment.json \
            --insecure \
            --reporters cli,json \
            --reporter-json-export newman-results.json \
            --export-cookie-jar newman_cookies.json \
            --verbose


  gui_tests:
    needs: api_tests_and_seed
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: wtp
          POSTGRES_USER: sebastianholmberg
          POSTGRES_PASSWORD: devpass123
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__DefaultConnection: Host=localhost;Port=5432;Database=wtp;Username=sebastianholmberg;Password=devpass123;Include Error Detail=true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Installera dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      - name: Installera psql
        run: sudo apt-get install -y postgresql-client
      - name: Initiera databasstruktur (samma som setup_db)
        run: |
          # Kör grundläggande schemadefiniton från init.sql
          PGPASSWORD=devpass123 psql -h localhost -U sebastianholmberg -d wtp -f sql/init.sql
          
          # Lägg till nödvändiga data i role-tabellen
          PGPASSWORD=devpass123 psql -h localhost -U sebastianholmberg -d wtp -c "
          -- Säkerställ att roller finns
          INSERT INTO role (id, company_role) VALUES (1, 'User') ON CONFLICT (id) DO NOTHING;
          INSERT INTO role (id, company_role) VALUES (2, 'Admin') ON CONFLICT (id) DO NOTHING;
          INSERT INTO role (id, company_role) VALUES (3, 'SuperAdmin') ON CONFLICT (id) DO NOTHING;
          
          -- Skapa vyn initial_form_messages
          CREATE OR REPLACE VIEW initial_form_messages AS
          SELECT
              tf.chat_token,
              tf.message,
              tf.first_name as sender,
              tf.submitted_at,
              tf.issue_type,
              tf.email,
              tf.company_type as form_type
          FROM tele_forms tf
          WHERE tf.is_chat_active = true
          UNION ALL
          SELECT
              ff.chat_token,
              ff.message,
              ff.first_name as sender,
              ff.submitted_at,
              ff.issue_type,
              ff.email,
              ff.company_type as form_type
          FROM fordon_forms ff
          WHERE ff.is_chat_active = true
          UNION ALL
          SELECT
              fs.chat_token,
              fs.message,
              fs.first_name as sender,
              fs.submitted_at,
              fs.issue_type,
              fs.email,
              fs.company_type as form_type
          FROM forsakrings_forms fs
          WHERE fs.is_chat_active = true;"
      - name: Uppdatera appsettings.json med rätt anslutningssträng
        run: |
          sed -i 's/"DefaultConnection": "Host=localhost;Port=5432;Database=wtp;Username=sebastianholmberg;"/"DefaultConnection": "Host=localhost;Port=5432;Database=wtp;Username=sebastianholmberg;Password=devpass123;Include Error Detail=true"/g' ./WTP-main/server/appsettings.json
          echo "Anslutningssträng i appsettings.json uppdaterad"
      - name: Seed testdata
        run: |
          # Kör SQL direkt från seed-filen istället för att gå via applikationen
          PGPASSWORD=devpass123 psql -h localhost -U sebastianholmberg -d wtp -c "
            -- Skapa admin-användare
            INSERT INTO public.users (first_name, password, created_at, company, role_id, email) 
            VALUES ('admin', 'admin321', '2025-04-07 07:42:10.181265 +00:00', 'fordon', 2, 'admin@admin.com')
            ON CONFLICT (email) DO UPDATE SET password = 'admin321';
            
            -- Skapa staff-användare
            INSERT INTO public.users (first_name, password, created_at, company, role_id, email) 
            VALUES ('staff', 'staff123', '2025-04-07 07:42:10.181265 +00:00', 'tele', 1, 'staff@staff.com')
            ON CONFLICT (email) DO UPDATE SET password = 'staff123';
            
            -- Seed minimal testdata för GUI-testerna
            INSERT INTO public.tele_forms (first_name, email, service_type, issue_type, message, chat_token, submitted_at, is_chat_active, company_type)
            VALUES ('TestKund', 'testkund@example.com', 'Bredband', 'Tekniskt problem', 'Testar ett formulär för teleärenden', '14dbbbb1-df13-4f5a-9ed7-f4553c48469c', '2025-04-07 09:51:40.188483 +00:00', true, 'Tele/Bredband')
            ON CONFLICT DO NOTHING;
          "
          echo "Direkt seed av testdata klar"
      
      # Starta backend från WTP-main
      - name: Starta backend
        run: dotnet run --project ./WTP-main/server/server.csproj &
      - name: Vänta på backend
        run: sleep 30
      
      # Starta frontend från WTP-main
      - name: Starta frontend
        run: |
          cd WTP-main/client
          npm install
          npm run dev &
      - name: Vänta på frontend
        run: sleep 30
      
      # Installera Playwright för .NET i N2NTest
      - name: Installera Playwright för .NET
        run: |
          cd N2NTest
          dotnet restore
          dotnet build
          dotnet tool install --global Microsoft.Playwright.CLI
          playwright install --with-deps
      
      # Kör tester från N2NTest
      - name: Kör GUI-tester
        run: |
          cd N2NTest
          dotnet test
